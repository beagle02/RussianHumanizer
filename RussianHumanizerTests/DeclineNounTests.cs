using FluentAssertions;
using Humanizer;
using RussianHumanizer;
using RussianHumanizer.NounDecline;

namespace RussianHumanizerTests;

public class DeclineNounTests
{
    [TestCase("земля", 1, 0, 1, "земля")]
    [TestCase("земля", 1, 1, 1, "земли")]
    [TestCase("земля", 1, 2, 1, "земле")]
    [TestCase("земля", 1, 3, 1, "землю")]
    [TestCase("земля", 1, 4, 1, "землей")]
    [TestCase("земля", 1, 5, 1, "земле")]
    [TestCase("страна", 1, 0, 1, "страна")]
    [TestCase("страна", 1, 1, 1, "страны")]
    [TestCase("страна", 1, 2, 1, "стране")]
    [TestCase("страна", 1, 3, 1, "страну")]
    [TestCase("страна", 1, 4, 1, "страной")]
    [TestCase("страна", 1, 5, 1, "стране")]
    [TestCase("возница", 0, 0, 0, "возница")]
    [TestCase("возница", 0, 1, 0, "возницы")]
    [TestCase("возница", 0, 2, 0, "вознице")]
    [TestCase("возница", 0, 3, 0, "возницу")]
    [TestCase("возница", 0, 4, 0, "возницей")]
    [TestCase("возница", 0, 5, 0, "вознице")]
    [TestCase("история", 1, 0, 1, "история")]
    [TestCase("история", 1, 1, 1, "истории")]
    [TestCase("история", 1, 2, 1, "истории")]
    [TestCase("история", 1, 3, 1, "историю")]
    [TestCase("история", 1, 4, 1, "историей")]
    [TestCase("история", 1, 5, 1, "истории")]
    [TestCase("дискотека", 1, 0, 1, "дискотека")]
    [TestCase("дискотека", 1, 1, 1, "дискотеки")]
    [TestCase("дискотека", 1, 2, 1, "дискотеке")]
    [TestCase("дискотека", 1, 3, 1, "дискотеку")]
    [TestCase("дискотека", 1, 4, 1, "дискотекой")]
    [TestCase("дискотека", 1, 5, 1, "дискотеке")]
    [TestCase("птица", 1, 0, 0, "птица")]
    [TestCase("птица", 1, 1, 0, "птицы")]
    [TestCase("птица", 1, 2, 0, "птице")]
    [TestCase("птица", 1, 3, 0, "птицу")]
    [TestCase("птица", 1, 4, 0, "птицей")]
    [TestCase("птица", 1, 5, 0, "птице")]
    [TestCase("жижа", 1, 0, 1, "жижа")]
    [TestCase("жижа", 1, 1, 1, "жижи")]
    [TestCase("жижа", 1, 2, 1, "жиже")]
    [TestCase("жижа", 1, 3, 1, "жижу")]
    [TestCase("жижа", 1, 4, 1, "жижей")]
    [TestCase("жижа", 1, 5, 1, "жиже")]
    [TestCase("юноша", 0, 0, 0, "юноша")]
    [TestCase("юноша", 0, 1, 0, "юноши")]
    [TestCase("юноша", 0, 2, 0, "юноше")]
    [TestCase("юноша", 0, 3, 0, "юношу")]
    [TestCase("юноша", 0, 4, 0, "юношей")]
    [TestCase("юноша", 0, 5, 0, "юноше")]

    [TestCase("стол", 0, 0, 1, "стол")]
    [TestCase("стол", 0, 1, 1, "стола")]
    [TestCase("стол", 0, 2, 1, "столу")]
    [TestCase("стол", 0, 3, 1, "стол")]
    [TestCase("стол", 0, 4, 1, "столом")]
    [TestCase("стол", 0, 5, 1, "столе")]
    [TestCase("конь", 0, 0, 0, "конь")]
    [TestCase("конь", 0, 1, 0, "коня")]
    [TestCase("конь", 0, 2, 0, "коню")]
    [TestCase("конь", 0, 3, 0, "коня")]
    [TestCase("конь", 0, 4, 0, "конем")]
    [TestCase("конь", 0, 5, 0, "коне")]
    [TestCase("герой", 0, 0, 0, "герой")]
    [TestCase("герой", 0, 1, 0, "героя")]
    [TestCase("герой", 0, 2, 0, "герою")]
    [TestCase("герой", 0, 3, 0, "героя")]
    [TestCase("герой", 0, 4, 0, "героем")]
    [TestCase("герой", 0, 5, 0, "герое")]
    [TestCase("окно", 2, 0, 1, "окно")]
    [TestCase("окно", 2, 1, 1, "окна")]
    [TestCase("окно", 2, 2, 1, "окну")]
    [TestCase("окно", 2, 3, 1, "окно")]
    [TestCase("окно", 2, 4, 1, "окном")]
    [TestCase("окно", 2, 5, 1, "окне")]
    [TestCase("поле", 2, 0, 1, "поле")]
    [TestCase("поле", 2, 1, 1, "поля")]
    [TestCase("поле", 2, 2, 1, "полю")]
    [TestCase("поле", 2, 3, 1, "поле")]
    [TestCase("поле", 2, 4, 1, "полем")]
    [TestCase("поле", 2, 5, 1, "поле")]
    [TestCase("бельё", 2, 0, 1, "белье")]
    [TestCase("бельё", 2, 1, 1, "белья")]
    [TestCase("бельё", 2, 2, 1, "белью")]
    [TestCase("бельё", 2, 3, 1, "белье")]
    [TestCase("бельё", 2, 4, 1, "бельем")]
    [TestCase("бельё", 2, 5, 1, "белье")]
    [TestCase("командир", 0, 0, 0, "командир")]
    [TestCase("командир", 0, 1, 0, "командира")]
    [TestCase("командир", 0, 2, 0, "командиру")]
    [TestCase("командир", 0, 3, 0, "командира")]
    [TestCase("командир", 0, 4, 0, "командиром")]
    [TestCase("командир", 0, 5, 0, "командире")]
    [TestCase("подмастерье", 0, 0, 0, "подмастерье")]
    [TestCase("подмастерье", 0, 1, 0, "подмастерья")]
    [TestCase("подмастерье", 0, 2, 0, "подмастерью")]
    [TestCase("подмастерье", 0, 3, 0, "подмастерье")]
    [TestCase("подмастерье", 0, 4, 0, "подмастерьем")]
    [TestCase("подмастерье", 0, 5, 0, "подмастерье")]

    [TestCase("сирень", 1, 0, 1, "сирень")]
    [TestCase("сирень", 1, 1, 1, "сирени")]
    [TestCase("сирень", 1, 2, 1, "сирени")]
    [TestCase("сирень", 1, 3, 1, "сирень")]
    [TestCase("сирень", 1, 4, 1, "сиренью")]
    [TestCase("сирень", 1, 5, 1, "сирени")]
    [TestCase("быль", 1, 0, 1, "быль")]
    [TestCase("быль", 1, 1, 1, "были")]
    [TestCase("быль", 1, 2, 1, "были")]
    [TestCase("быль", 1, 3, 1, "быль")]
    [TestCase("быль", 1, 4, 1, "былью")]
    [TestCase("быль", 1, 5, 1, "были")]
    [TestCase("радость", 1, 0, 1, "радость")]
    [TestCase("радость", 1, 1, 1, "радости")]
    [TestCase("радость", 1, 2, 1, "радости")]
    [TestCase("радость", 1, 3, 1, "радость")]
    [TestCase("радость", 1, 4, 1, "радостью")]
    [TestCase("радость", 1, 5, 1, "радости")]
    [TestCase("вещь", 1, 0, 1, "вещь")]
    [TestCase("вещь", 1, 1, 1, "вещи")]
    [TestCase("вещь", 1, 2, 1, "вещи")]
    [TestCase("вещь", 1, 3, 1, "вещь")]
    [TestCase("вещь", 1, 4, 1, "вещью")]
    [TestCase("вещь", 1, 5, 1, "вещи")]
    [TestCase("блажь", 1, 0, 1, "блажь")]
    [TestCase("блажь", 1, 1, 1, "блажи")]
    [TestCase("блажь", 1, 2, 1, "блажи")]
    [TestCase("блажь", 1, 3, 1, "блажь")]
    [TestCase("блажь", 1, 4, 1, "блажью")]
    [TestCase("блажь", 1, 5, 1, "блажи")]
    [TestCase("горечь", 1, 0, 1, "горечь")]
    [TestCase("горечь", 1, 1, 1, "горечи")]
    [TestCase("горечь", 1, 2, 1, "горечи")]
    [TestCase("горечь", 1, 3, 1, "горечь")]
    [TestCase("горечь", 1, 4, 1, "горечью")]
    [TestCase("горечь", 1, 5, 1, "горечи")]
    public void DeclineNoun_Ok(string word, GrammaticalGender gender, RussianCase @case, Animation animation,
        string expected)
    {
        var actual = word.DeclineNoun(gender, animation, @case);
        actual.Should().Be(expected);
    }
}